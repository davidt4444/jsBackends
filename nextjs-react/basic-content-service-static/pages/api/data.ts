export interface Post {
  id:number;
  uniqueId:string;
  title:string;
  content:string;
  createdAt:string;
  author:string;
  category:string;
  updatedAt:string;
  likesCount:number;
  authorId:number;
  isPublished:boolean;
  views:number;
}

export const data:Post[] = [{"id":1,"uniqueId":"f052ef5e-d085-11ee-870c-0a0196b39d53","title":"Company Vs. Brand","content":"<p>There us a difference between your company and your brand. Your company is a collection of people working on a common problem. Your brand is an idealized version of the company's product that you want people to think about in their head when they are shopping.</p>\n<p>Your brand is a thought.</p>\n<p>This is why the name of your brand can give you wings, it can make you feel happy, and many other things. The brand is the moat that surrounds the company and protects the company from competitors. The only thing that can tarnish your brand is the company that is responsible for it.</p>\n<p>Don't take that responsibility lightly.</p>\n","createdAt":"2024-02-21T06:53:37.000Z","author":"David Thigpen","category":null,"updatedAt":null,"likesCount":0,"authorId":null,"isPublished":true,"views":0},{"id":2,"uniqueId":"2704a8e6-d086-11ee-870c-0a0196b39d53","title":"Introductory Site","content":"<h1>Soon to feature [The Name of Your Brand]</h1>\n<p>When you build a brand, \nyou should get a domain name that \nmatches the name of your brand  \nif it is available.\n</p>\n<p>Once you purchase the domain name, \n    you should have a list of services \n    that you provide on the website.\n</p>\n<ul>\n    <li>Service 1</li>\n    <li>Service 2</li>\n    <li>Service 3</li>\n    <li>Service 4</li>\n</ul>\n<p>When making the list, make sure to use the ul and li\n    tags, because computer programs/web crawlers tend to be written to \n    process and search information in lists better. To the program,\n    it is a stream of information.\n</p>\n<p>At the bottom of the page, \n    there should be a marker of the author/copyright \n    holder of the page for tracking purposes.</p>\n<p>The html for this page might be a good guide \n    without the script between the two \"Google tag (gtag.js)\" \n    comments, which house the links for the presentation.</p>\n","createdAt":"2024-02-21T06:55:09.000Z","author":"David Thigpen","category":null,"updatedAt":null,"likesCount":0,"authorId":null,"isPublished":true,"views":0},{"id":3,"uniqueId":"5765b2d5-d086-11ee-870c-0a0196b39d53","title":"Building a Menu Bar","content":"<p>The next step is to add in a menu bar for any additional \n    pages that you need.</p>\n<p>The menu bar should be a list of links using the ul and \n    li tags to make it easier for the web crawler to \n    process.</p>\n<p>To get the list to go sideways you need to put \n    list-style: none; and display:inline-block; in the \n    style for the li tags.</p>\n<p>You should also set the height and the width of the li tags.\n    For this, I used width: 200px; and height:1.5em;. \n    I also set the list in a div with one background color and\n    set a different background color for the li tags.  \n</p>\n<p>If you want to remove the indent of the list, you need to\n    set the style for the ul tag contained in the div \n    with setlist-style-type: none; and  padding:0px; for \n    the ul tag.\n</p>\n<p>The html for this page might be a good guide \n    without the stuff between the two \"Google tag (gtag.js)\" \n    comments, which house the links for the presentation.</p>\n","createdAt":"2024-02-21T06:56:30.000Z","author":"David Thigpen","category":null,"updatedAt":null,"likesCount":0,"authorId":null,"isPublished":true,"views":0},{"id":4,"uniqueId":"8f5d4bb9-d086-11ee-870c-0a0196b39d53","title":"Using Jquery to Modularize Site Code and Building a sitemap.xml File","content":"<p>Now it is time to divide up the header, menu and footer \n    into different files and use jquery to combine them \n    all into one file. The html for this page might be a good guide \n    without the stuff between the two \"Google tag (gtag.js)\" \n    comments, which house the links for the presentation.</p>\n<p>When you do this, all of the links that come from the \n    menu will be unavailable for the web crawler on this page, \n    since the javascript will not have run for the web crawler.\n    You can see this for yourself in the source for \n    this webpage.\n</p>\n<p>To compensate for this, you need to create a sitemap.xml file \n    that tells the web crawler where all of the files with the \n    content are. You then need to submit it to <a href=\"https://search.google.com/search-console/about\">Google Search \n    Console</a>.\n</p>\n<p>An example of a sitemap for this website is below:</p>\n<xmp><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<urlset\n      xmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\"\n      xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n      xsi:schemaLocation=\"http://www.sitemaps.org/schemas/sitemap/0.9\n            http://www.sitemaps.org/schemas/sitemap/0.9/sitemap.xsd\">\n\n\n<url>\n  <loc>https://www.thenameofyourbrand.com/</loc>\n  <lastmod>2024-02-10T15:44:00+00:00</lastmod>\n</url>\n<url>\n  <loc>https://www.thenameofyourbrand.com/index.html</loc>\n  <lastmod>2024-02-10T15:44:00+00:00</lastmod>\n</url>\n<url>\n  <loc>https://www.thenameofyourbrand.com/brand.html</loc>\n  <lastmod>2024-02-10T15:44:00+00:00</lastmod>\n</url>\n<url>\n  <loc>https://www.thenameofyourbrand.com/page1.html</loc>\n  <lastmod>2024-02-10T15:44:00+00:00</lastmod>\n</url>\n<url>\n  <loc>https://www.thenameofyourbrand.com/page2.html</loc>\n  <lastmod>2024-02-10T15:44:00+00:00</lastmod>\n</url>\n<url>\n  <loc>https://www.thenameofyourbrand.com/page3.html</loc>\n  <lastmod>2024-02-10T15:44:00+00:00</lastmod>\n</url>\n<url>\n  <loc>https://www.thenameofyourbrand.com/page4_1.html</loc>\n  <lastmod>2024-02-10T15:44:00+00:00</lastmod>\n</url>\n<url>\n  <loc>https://www.thenameofyourbrand.com/page5.html</loc>\n  <lastmod>2024-02-10T15:44:00+00:00</lastmod>\n</url>\n<url>\n  <loc>https://www.thenameofyourbrand.com/page6.html</loc>\n  <lastmod>2024-02-10T15:44:00+00:00</lastmod>\n</url>\n<url>\n  <loc>https://www.thenameofyourbrand.com/page7.html</loc>\n  <lastmod>2024-02-10T15:44:00+00:00</lastmod>\n</url>\n<url>\n  <loc>https://www.thenameofyourbrand.com/header.html</loc>\n  <lastmod>2024-02-10T15:44:00+00:00</lastmod>\n</url>\n<url>\n  <loc>https://www.thenameofyourbrand.com/menu.html</loc>\n  <lastmod>2024-02-10T15:44:00+00:00</lastmod>\n</url>\n<url>\n  <loc>https://www.thenameofyourbrand.com/bottom.html</loc>\n  <lastmod>2024-02-10T15:44:00+00:00</lastmod>\n</url>\n<url>\n  <loc>https://www.thenameofyourbrand.com/main_header.html</loc>\n  <lastmod>2024-02-10T15:44:00+00:00</lastmod>\n</url>\n<url>\n  <loc>https://www.thenameofyourbrand.com/main_menu.html</loc>\n  <lastmod>2024-02-10T15:44:00+00:00</lastmod>\n</url>\n<url>\n  <loc>https://www.thenameofyourbrand.com/tableOfContents.html</loc>\n  <lastmod>2024-02-10T15:44:00+00:00</lastmod>\n</url>\n<url>\n  <loc>https://www.thenameofyourbrand.com/main_bottom.html</loc>\n  <lastmod>2024-02-10T15:44:00+00:00</lastmod>\n</url>\n<url>\n  <loc>https://www.thenameofyourbrand.com/exampleBlog.html</loc>\n  <lastmod>2024-02-10T15:44:00+00:00</lastmod>\n</url>\n<url>\n  <loc>https://www.thenameofyourbrand.com/exampleBlog.js</loc>\n  <lastmod>2024-02-10T15:44:00+00:00</lastmod>\n</url>\n\n\n</urlset>\n</xmp>\n","createdAt":"2024-02-21T06:58:04.000Z","author":"David Thigpen","category":null,"updatedAt":null,"likesCount":0,"authorId":null,"isPublished":true,"views":0},{"id":5,"uniqueId":"d1dc133c-d086-11ee-870c-0a0196b39d53","title":"Setting Up a Json Fed Blog Stream","content":"    <p>Sometimes you may want to add a scrolling blog to your site, but don't want to have to install a major blogging software. One way of doing this is to have a scrolling blog that is fed by a static json file.</p>\n    <p>An example of the json format used is below.</p>\n    <div id=\"blogJson\" class=\"blogJson\"><pre>data= [\n    {\n        'title':'First post',\n        'author':'davidt4444',\n        'date':'3-5-2020',\n        'content':\"First post content\"\n    },\n    {\n        'title':'Second post',\n        'author':'davidt4444',\n        'date':'3-5-2020',\n        'content':\"Second post content\"\n    },\n];</pre></div>\n    <p>The variable data houses a list of posts between the [ and ]. The posts are between the { and } with a comma separating them. The variables in the posts correspond to the output below. Notice that the posts are displayed in last first order</p>\n    <div id=\"blog\" class=\"blog\"><div><style>\n    .postTitle{\n        font-size: 2em;\n        font-family: sans-serif;\n        font-weight: bold;\n    }\n    .postContent{\n        padding:10px;\n    }\n    .post{\n        width:60%;\n        padding:15px;\n        border-bottom-color:black;\n        border-bottom-style:dotted;\n    }\n</style>\n\n<script src=\"exampleBlog.js\"></script>\n<div class=\"blogContent\" id=\"blogContent\">\n<script>\n    for(i=data.length-1; i>=0;i--)\n    {\n        var post = document.createElement(\"div\");\n        post.setAttribute(\"class\", \"post\");\n        post.setAttribute(\"id\", \"post\"+i);\n        var elementContainer = document.createElement(\"div\");\n        elementContainer.setAttribute(\"class\", \"postTitle\");\n        elementContainer.setAttribute(\"id\", \"postTitle\"+i);\n        elementContainer.appendChild(document.createTextNode(data[i].title));\n        post.appendChild(elementContainer);\n        \n        elementContainer = document.createElement(\"div\");\n        elementContainer.setAttribute(\"class\", \"postAuthor\");\n        elementContainer.setAttribute(\"id\", \"postAuthor\"+i);\n        elementContainer.appendChild(document.createTextNode(data[i].author));\n        post.appendChild(elementContainer);\n        \n        elementContainer = document.createElement(\"div\");\n        elementContainer.setAttribute(\"class\", \"postDate\");\n        elementContainer.setAttribute(\"id\", \"postDate\"+i);\n        elementContainer.appendChild(document.createTextNode(data[i].date));\n        post.appendChild(elementContainer);\n        \n        elementContainer = document.createElement(\"div\");\n        elementContainer.setAttribute(\"class\", \"postContent\");\n        elementContainer.setAttribute(\"id\", \"postContent\"+i);\n        elementContainer.appendChild(document.createTextNode(data[i].content));\n        post.appendChild(elementContainer);\n        \n        document.getElementById(\"blogContent\").appendChild(post);\n\n}\n</script>\n<!-- Google tag (gtag.js) -->\n<script async=\"\" src=\"https://www.googletagmanager.com/gtag/js?id=G-NSMQW0PP0F\"></script>\n<script>\n  window.dataLayer = window.dataLayer || [];\n  function gtag(){dataLayer.push(arguments);}\n  gtag('js', new Date());\n\n  gtag('config', 'G-NSMQW0PP0F');\n</script>\n<!-- Google tag (gtag.js) -->\n<div class=\"post\" id=\"post1\"><div class=\"postTitle\" id=\"postTitle1\">Second post</div><div class=\"postAuthor\" id=\"postAuthor1\">davidt4444</div><div class=\"postDate\" id=\"postDate1\">3-5-2020</div><div class=\"postContent\" id=\"postContent1\">Second post content</div></div><div class=\"post\" id=\"post0\"><div class=\"postTitle\" id=\"postTitle0\">First post</div><div class=\"postAuthor\" id=\"postAuthor0\">davidt4444</div><div class=\"postDate\" id=\"postDate0\">3-5-2020</div><div class=\"postContent\" id=\"postContent0\">First post content</div></div></div></div></div>\n    <p>The html for this page might be a good guide \n      without the script between the two \"Google tag (gtag.js)\" \n      comments, which house the links for the presentation. The blog html/Javascript and Json can be found at exampleBlog.html (Houses the html and javascript to populate the list) and exampleBlog.js (Houses the Json variable with the data).</p>\n","createdAt":"2024-02-21T06:59:56.000Z","author":"David Thigpen","category":null,"updatedAt":null,"likesCount":0,"authorId":null,"isPublished":true,"views":0},{"id":6,"uniqueId":"03ad8908-d087-11ee-870c-0a0196b39d53","title":"From Static Json to Services","content":"<p>The prior page setup the idea of using Json to populate a blog of sorts. The use of Json, Xml and other information streams to populate and report on the activity of websites, applications and devices has been happening for decades. With 3gpp, Json is even used to power the cellphone that you're probably reading this on right now. </p>\n<p>For most web applications, the Json is generated by a web service that is subscribed to by the front end of the web application. It is then bound to elements in the front end to do the same thing that was done in the previous example with a list of posts. </p>\n<p>Because there are so many services out there, there has been a growing need by some clients to aggregate all of the data that is available outside of company systems and present it via custom reports taylored to the needs of the client. This is something that is done by our trusted provider <a href=\"https://www.aggregatedatasystems.com/\">Aggregate Data Systems</a>.</p>\n<p><a href=\"https://www.aggregatedatasystems.com/\">Aggregate Data Systems</a> is a data integrator that uses publicly and privately purchased information streams to generate their reports through proprietary technology that finds inferred joins across data streams where one was not explicitly made.</p>\n<p>With all of this in mind, think about all of the things that you would like to know about the patterns of behavior of your audience using the data that you are able to gather in your own processes/systems and how you could taylor your product to better fit the needs of your customer with that data.</p>\n<p>As you build this list, you are starting to go down the road of building requirements for your future developer or becoming a more informed consumer for when you contract your work out to a company like <a href=\"https://www.thigpenconsulting.com/\">Thigpen Consulting</a>. Someone that is able to explain at least some of what they want in a more informed way is a useful partner to have as a company.</p>\n","createdAt":"2024-02-21T07:01:19.000Z","author":"David Thigpen","category":null,"updatedAt":null,"likesCount":0,"authorId":null,"isPublished":true,"views":0},{"id":7,"uniqueId":"3374d2e4-d087-11ee-870c-0a0196b39d53","title":"Internal/External Service Sources","content":"<p>There are a number of services that can be a part of your companies list of data sources. This is not by any means exhaustive and many companies use more than one provider for similar services. These data sources can be hosted onsite or off site.</p>\n<p>Examples of these services are:</p>\n<ul>\n    <li>Enterprise Resource Planning (ERP)</li>\n    <ul>\n    <li>Oracle NetSuite</li>\n    <li>Microsoft Dynamics 365</li>\n    <li>SAP Business One</li>\n    <li>Accumatica Cloud ERP</li>\n    <li>Katana (Inventory)</li>\n    <li>Sage Intacct (Accounting)</li>\n    <li>...</li>\n    </ul>\n    <li>Customer Relationship Management (CRM)</li>\n    <ul>\n    <li>Salesforce</li>\n    <li>SAP Business One</li>\n    <li>Microsoft Dynamics 365</li>\n    <li>Oracle NetSuite</li>\n    <li>Zoho CRM Plus</li>\n    <li>...</li>\n    </ul>\n    <li>Human Resource Management (HRM) / Human Capital Management (HCM) / Human Resource Information System (HRIS)</li>\n    <ul>\n    <li>ADP Workforce Now</li>\n    <li>Paychex</li>\n    <li>Paycom</li>\n    <li>SAP HCM</li>\n    <li>Oracle PeopleSoft</li>\n    <li>Microsoft Dynamics 365</li>\n    <li>...</li>\n    </ul>\n    <li>Project Management</li>\n    <ul>\n    <li>Jira</li>\n    <li>Asana</li>\n    <li>MS Teams</li>\n    <li>...</li>\n    </ul>\n    <li>Time Management</li>\n    <ul>\n    <li>Harvest</li>\n    <li>Asana</li>\n    <li>Trello</li>\n    <li>...</li>\n    </ul>\n    <li>Expensing for Travel</li>\n    <ul>\n    <li>SAP Concur</li>\n    <li>Expensify</li>\n    <li>...</li>\n    </ul>\n    <li>Corporate Email</li>\n    <ul>\n    <li>Outlook</li>\n    <li>Gmail</li>\n    <li>...</li>\n    </ul>\n    <li>Corporate Messaging Services</li>\n    <ul>\n    <li>Teams/Skype</li>\n    <li>Slack/Hipchat/Stride</li>\n    <li>Discord</li>\n    <li>...</li>\n    </ul>\n    <li>File Sharing Services</li>\n    <ul>\n    <li>Dropbox</li>\n    <li>Sharepoint</li>\n    <li>OneDrive</li>\n    <li>Google Drive</li>\n    <li>iCloud</li>\n    <li>...</li>\n    </ul>\n    <li>Version Control</li>\n    <ul>\n    <li>Github</li>\n    <li>Gitlab</li>\n    <li>Bitbucket</li>\n    <li>Perforce</li>\n    <li>...</li>\n    </ul>\n    <li>Wiki/Blogging/Website Content Providers</li>\n    <ul>\n    <li>Confluence</li>\n    <li>Wordpress</li>\n    <li>Blogger</li>\n    <li>Drupal</li>\n    <li>...</li>\n    </ul>\n    <li>Website Analytics</li>\n    <ul>\n    <li>Google Analytics</li>\n    <li>Mixpanel</li>\n    <li>Kissmetrics</li>\n    <li>Adobe Analytics</li>\n    <li>...</li>\n    </ul>\n</ul>\n<p>In addition these services, there can be a lot of custom and industry specific services that you use as a company. There are also a lot of data collection points determined by what cloud provider you use to host stuff in terms of the many workflow and continuous integration/delivery/deployment tools that you may use.</p>\n<p>When seeking out help to better use the data that you are gathering, it is a good idea to do a tech audit of what you have before bringing someone in from outside, so that you can better understand the pluses or minuses of the products being sold to you.</p>\n","createdAt":"2024-02-21T07:02:39.000Z","author":"David Thigpen","category":null,"updatedAt":null,"likesCount":0,"authorId":null,"isPublished":true,"views":0},{"id":8,"uniqueId":"6e1c1242-d087-11ee-870c-0a0196b39d53","title":"What to do with the data","content":"<p>The pro: You have a lot of data.</p>\n<p>The con: The data will at best only explain a third of the human behavior you want to track.</p>\n<p>Anecdotally, I had a woman call me a couple of days ago about a book/thesis I wrote a long time ago called The Theory Behind Magazine Business Decisions. She was asking about why I priced the title on Amazon the way I did, and why I chose the size of the book the way that I did. She then proceeded to break down title pricing and page sizing in the broader market, while talking about specific things in the book and an AI model being used by her.</p>\n<p>I had to explain to her that I only had it on there to spare one researcher the money and time it cost to get the thesis copied at 10 cents a page by the people at the library. Amazon could do it faster and cheaper.</p>\n<p>The point is that there isn't a data trail for that, and the decision was made in response to the actions of another person. This complexity of explaining the decision making of others is the reason why there have been whole books devoted to the subject.</p>\n<p>In the case of your company's data, let's just go through it simply.</p>\n<p>What is the data that we have collected through our various services that we inventoried in the prior pages?</p>\n<p>The data that we collect is the measured interactions on the devices that are associated with a person. There is no guarantee in terms of who is doing those interactions. We are basically inferring who is doing those things based on observations surrounding those interactions. Most of these observations are exclusionary and allow us to filter out unnecessary data.</p>\n<p>For instance, when a person fills out info for a user profile, they may provide demographic information about themselves that allows them to be put into different categories.</p>\n<p>In addition to that, observations on the time of day can be used to fit data into some type of the pattern of behavior. </p>\n<p>The typical pattern for the average human being is :</p>\n<ul>\n    <li>8 hours of sleep a day</li>\n    <li>3 hours of meal time a day (1 hour per meal with breakfast, lunch and dinner)</li>\n    <li>8 hours of \"work\" a week day (four hours in the morning four hours in the afternoon)</li>\n    <li>1 hour of commute time a week day (30 minutes there and 30 minutes back)</li>\n</ul>\n<p>The \"free\" time where you are not eating, sleeping, working or commuting is:</p>\n<ul>\n    <li>4 hours a day during the weekday</li>\n    <li>13 hours a day in the weekend</li>\n</ul>\n<p>In addition to time of day, there are things going on around an individual that might provide some insight as to why they are there.</p>\n<p>My personal favorite thing related to this is that a while back my hometown had a big drug bust. When I searched the cross street mentioned in the article on google maps, the bus routes that serviced the location popped up.</p>\n<p>So, in addition to pattern of behavior, the metadata surrounding the device data gets thrown into the mix of explanatory factors. The location data usually comes from user provided data or the host requesting the data from the server, which can be cross references against metadata on associated devices/locations nearby (wifi networks, points of sale, bus routes, etc.).</p>\n<p><b>Note: With regards to employers, I would not get too strict on using on login location to track employees. Otherwise, your employees will just start using an intermediate vpn as an added step before using your vpn or other services if they aren't already (Several phone providers have vpn setup to automatically cut on when on a wifi network).</b></p>\n<p>In addition to location, there are various slowly changing dimensions surrounding the behavior of individuals. These are collected in the form of current and former actions over a given period of time by the various services that you use.</p>\n<p>All of this represents only a fraction of the total number of explanatory variables surrounding the decisions people make, but it is impossible to have all of the data.</p>\n<p>This is why, after you have filtered out the tail cases where an individual has already made a decision, the fit of the model is in the single digits and the predictive power is usually at most a third right. However, using this data for targeted advertising is still three times better than blanket advertising.</p>\n<p>This is why people mine the data that they collect for potential insights into their customer base.</p>\n","createdAt":"2024-02-21T07:04:18.000Z","author":"David Thigpen","category":null,"updatedAt":null,"likesCount":0,"authorId":null,"isPublished":true,"views":0},{"id":9,"uniqueId":"1650d9e8-d14e-11ee-8ccc-0a0196b39d53","title":"More on analytics with an example service for a blog","content":"    <p>The last three pages were to allow you to take a step back and think about all of the services that may already be present in your environment and possible use cases for that data, so that you or someone else can start to think about making an inventory of where you are right now. </p>\n    <p>With that in process, it might be a good idea to pick up where we left off with the example of a Json fed blog stream...</p>\n    <p>A long time ago, when I had my first paid job as a developer, my boss made me write a wire frame mockup for the design pattern he wanted me to follow for my future projects while I was working with him. The template lesson was building a blog, because it incorporated a model; a controller for the web requests and database calls; and web pages for the views. It was also a good way to learn about requirements gathering and planning for development.</p>\n    <p>From a high level, the requirement is something simple like, \"Something to display content that is created to the broader world.\" However, that high level requirement has embedded in it the idea of growing a brand and the audience for the content and finding ways to better understand the consumer, because, at each point in the process, data is generated about the consumer of the content. This will be covered throughout the pages on this example.</p>\n    <p>In our earlier example blog, we had variables for title, author, date and content. In our <a href=\"https://github.com/davidt4444/basic-content-service\">basic-content-service</a> program we will be going over today, the only things that will be added are id and uniqueId, which are used as keys for data retrieval from the database and in http requests.</p> \n    <p><b>Note: All of the code for basic-content-service is hosted in the <a href=\"https://github.com/davidt4444/basic-content-service\">basic-content-service github repository here</a>, which I kept public.</b></p>\n    <p>All of the content is viewed through two views, view.html and adminView.html. The content for those pages is pulled from a back end written in python with FastApi and served using Uvicorn.</p> <p> For the adminView.html view, the code in main.py is used to run all of services on a local laptop against a database that is access through port tunneling.</p>\n    <p>The view.html contains the components that need to be copied and pasted into the content div of the eventual skin for the blog. It hits the get services in the production.py code that allow it to read the data entered into the database from the adminView. All of the creating, editing and deleting services have been stripped out.</p>\n    <p>All of the persisted variables and workflow that used to be taken care of by a controller in the back end is handled by the BasicContentService class in BasicContentService.js</p>\n    <p>If you are reading this right now on the blog.html page of the site, you are currently a user of the <a href=\"https://github.com/davidt4444/basic-content-service\">basic-content-service</a>. I took the liberty of adding in the content from the first seven pages to the blog and may create static pages for the content posted to the blog for indexing purposes.</p>\n    <p>In the coming posts, I will be going over the data that is being gathered by the <a href=\"https://github.com/davidt4444/basic-content-service\">basic-content-service</a>, and how to use outside data sources to glean further insights into your audience using this program or any other.</p>\n","createdAt":"2024-02-22T06:46:20.000Z","author":"David Thigpen","category":null,"updatedAt":null,"likesCount":0,"authorId":null,"isPublished":true,"views":0},{"id":10,"uniqueId":"7804ed17-d1f3-11ee-8ccc-0a0196b39d53","title":"Information gained from the web server logs","content":"    <p>This morning I had to call a store on the phone to get some information about whether or not the item I was looking to purchase was in stock. The person on the other end of the phone had my number to verify it was me and was able to call back if necessary.</p>\n    <p> Today, we take for granted the fact that the person on the other end will be able to see the name of the person calling on caller ID, but the market trial and commercial deployment of this logging technology didn't happen until it was first done by BellSouth in the mid to late 1980's. A decent chunk of the population has never known a world without it. </p>\n    <p>This type of logging is so useful that it also occurs on most network services that you use today. Almost all of the web server logs have the ip address making the request, the type of the request, the path of the request and the time for every request that made it to the server both successful and unsuccessful (It does not include requests that were blocked by the firewall or sent to the wrong address, because those requests didn't make it to the server).</p>\n    <p>Let's look through the data in the requests that are logged by the basic-content-service.</p>\n    <p><b>IP Address</b></p>\n    <p>IP addresses are under the Internet Assigned Numbers Authority (IANA), which is under the Public Technical Identifiers (PTI). PTI is an affiliate of the Internet Corporation for Assigned Names and Numbers (ICANN). </p>\n    <p>All of this organizing started rolling in 1998 with the  National Telecommunications and Information Administration (NTIA) under the U.S. Department of Commerce issuing a request for comment on \"A Proposal to Improve the Technical Management of Internet Names and Addresses.\" Before that, it was a side project of one guy named Jon Postel (His story is fascinating).</p>\n    <p>Thus, all of the data is held in a central location, and, as such, there are various vendors for data relating to the physical location of all of the ip addresses (Sort of like an old time phone book, but in database form).</p>\n    <p>However, like phone numbers, just because the ip address is located in one place, it does not mean that the person behind the machine is in that given location. The person could be using proxies, a vpn or other means of browsing that obscure the source of the request.</p>\n    <p><b>Request Type</b></p>\n    <p>The four main request types are  POST, which is a create request for data; GET, which is a read request for data; PATCH, which is an update request for data; and DELETE, which is a delete request for data. These operations jointly described as CRUD (Create, Read, Update, Delete) and are often linked to command query response segregation (CQRS). </p>\n    <p><b>Request Path</b></p>\n    <p>The request path is the part of the url to the right of the domain name without the query parameters from the question mark to the right. So, for the url \"https://finance.yahoo.com/quote/SPY?fr=sycsrp_catchall\", it is the string \"/quote/SPY\" that will be listed as the path. You can find it by typing window.location.pathname in view->developer->\"javascript console\" in chrome or just running some javascript in a web page.</p>\n    <p> To make sure the query parameters are logged, you need to make sure the services pass the variables in the path and rely on the web server to do the rewrite to supply the variables to the backend.</p>\n    <p>The nice thing about the request path is that it also provides some hints as to the origin of the requests. For instance, a lot of the bot web crawlers used by search engines look for the robots.txt file when crawling a link found on a web page. </p>\n    <p><b>Request Time</b></p>\n    <p>Usually, the output time on the server is in either Coordinated Universal Time (UTC) where the offset it 0 or it is the local time of where the server is located. New York City/Atlanta has a -5 offset during eastern standard time (EST), meaning that you subtract five hours from UTC to get EST.</p>\n    <p><b>Things to Remember</b></p>\n    <p>The web server records all requests, both successful and unsuccessful that made it to the server. After a request makes it to the server, it is up to the middleware to determine what to do with it next. The data that you can glean from the middleware and the header data is what we will cover next.</p>\n","createdAt":"2024-02-23T02:30:11.000Z","author":"David Thigpen","category":null,"updatedAt":null,"likesCount":0,"authorId":null,"isPublished":true,"views":0},{"id":11,"uniqueId":"0f094742-d32f-11ee-8ccc-0a0196b39d53","title":"Path, query, header, cookie, hidden inputs and middleware","content":"    <p>To go back to our phone call story from the last page, most states in the United States are one party consent, where only one person on the call has to consent to being recorded.  The rest are two party consent and are the reason why we hear a message at the beginning of the call saying, \"This call may be monitored for quality assurance and training purposes.\"</p>\n    <p> Something similar happens with websites. Under various laws throughout the world, you are required to put a notice up if you are collecting personally identifiable information about the user.</p>\n    <p><b>Note: Before I begin this, if all you want is a broad overview of your traffic, you can still get a decent enough amount of traffic measurement for the site as a whole with cookie-less pings that don't require user consent (i.e. with consent turned off). The stuff below is for internal systems that require affirmative consent.</b></p>\n    <p>To do something similar to call monitoring with websites, you have to have a session of some sort. A session can be maintained by having a key value pair stored somewhere in the user interactions between the browser and the server. This key value pair has a unique value related to the user of the site. It could be parameters in the path, query, header or cookie, or it could also be hidden inputs in the html itself.</p>\n    <p>To help you understand where some of that data is stored, here are the parts of a url in order.</p>\n    <ul>\n      <li>Protocol</li>\n      <li>://</li>\n      <li>Domain</li>\n      <li>:</li>\n      <li>Port</li>\n      <li>Path</li>\n      <li>?</li>\n      <li>Query</li>\n    </ul>\n    <p>The response headers are a bunch of key value pairs describing the request with information like Content-Type, Date, Server, etc. Cookies are just values passed in the response headers with Set-Cookie as the key and the value stores the cookie and a space separated list of the meta data associated with the cookie.</p>\n    <p>This includes</p>\n    <ul>\n      <li>The cookie (key=value)</li>\n      <li>The path (The level on which the cookie is usable)</li>\n      <li>The domain (To only set the cookie for a particular sub domain)</li>\n      <li>The expiration date (The date the cookie expires)</li>\n      <li>Secure (Meant for encrypted routes like https)</li>\n      <li>HttpOnly (Can't be accessed through javascript)</li>\n    </ul>\n    <p> For hidden inputs, this was usually done by inputs inside of a form element back in the days of multipart forms being used for request submission, but with some of the restrictions on cookies being used in various countries, it has made a come back in some systems.</p>\n    <p>An example of one is below:</p>\n    <xmp>\n      <input type=\"hidden\" id=\"webAppId\" name=\"webAppId\" value=\"12345\" >\n    </xmp>\n    <p>However you store it, this unique value is the key to the session store of data related to the individual user's interaction with a site. So, it can be used to store any and every piece of activity related to the user on the site. Facebook's activity log is an example of the lengths that some companies go to in the name of tracking user activity.</p>\n    <p>If that were not enough, there can be multiple session stores from one user for each activity the user is engaged in across a whole system of sites. </p>\n    <p>Think of all of the systems that you have logged into using an account you had somewhere else and think about all of the potential unique identifiers that might be tied into the account you used to signed in. It probably included things like your email address, home address, phone number, etc. </p>\n    <p>For reference, FastApi in python treats path, query, header and cookie parameters as sister types. They are accessed in a similar way in the parameters to a function.</p>\n    <p>In this sense,</p>\n    <pre>\n      user_agent: Annotated[str | None, Header()]\n    </pre>\n    <p>is the same as </p>\n    <pre>\n      user_agent:str\n    </pre>\n    <p>in the parameters.</p>\n    <p>It is just that the annotated usage provides better documentation of where the variable comes from, since there are multiple potential sources. Documenting this, when there isn't a one to one visual like in the path, is important, because sometimes you have people that come into software development from other disciplines and were not doing this for half their life. Annotated takes two inputs, datatype and metadata on the variable.</p>\n    <p>Those inputs are set using a response object that wraps the return value, either temporally or directly.</p>\n    <p> Temporally means passing the object in the parameters. FastApi will extract all of the headers into that variable and wrap the return value with anything added to that variable in the function.</p>\n    <p>Directly means creating the response (i.e. JSONResponse) with the content of the response, adding the headers manually and being responsible for making sure that the data is of the correct type.</p>\n    <p>All of those parameters aren't just used for tracking users though, they are also used as gatekeepers by the service middleware layer. The middleware layer can limit access to the services based on the origin of the request, block the use of cookies in the headers, limit the methods that are processed and even the types of headers that are received or exposed in the browser.</p>\n    <p>We can look further into the types of data that you can store in the session in the next page, or I may revisit the progression of where to go to next in growing your web presence.</p>\n","createdAt":"2024-02-24T16:09:16.000Z","author":"David Thigpen","category":null,"updatedAt":null,"likesCount":0,"authorId":null,"isPublished":true,"views":0},{"id":12,"uniqueId":"69d70c44-d42f-11ee-8ccc-0a0196b39d53","title":"Session Data: the different types of data collected, part 1","content":"    <p>I once took a personal flight from a city where I was working and counted on my phone's ability to know where I parked my car when I came back in town. The reason my phone was able to record this was that it knew when my bluetooth disconnected from the car audio system. This is an example of not recording every data point, but on recording the data that is most important given the context.</p>\n    <p>For a lot of things, it might be useful to think about the context of the action you want to track and the events that are recorded during that act. This allows you to have the appropriate event listeners and avoid collecting unnecessary data.</p>\n    <p>Once you have the event, it becomes a transaction that you save in the database for that user.</p>\n    <p>Now, let's take a moment to revisit that trip I took. During that trip, I became sick and had to go back to my hometown instead of where I was working. While I was in my hometown, I drove another car and connected to another bluetooth. This caused me to lose the location of my car, and, when I finally made it back to the airport parking lot where my car was parked, I was left riding around in someone else's car at the airport parking lot trying to hear my car beep when I pressed the button on the fob. </p>\n    <p>This is why you keep logging and storing transactions every time that they happen.</p>\n    <p>Historical data allows you to revert in the case of a crash, and it allows you to find patterns related to the events over time. This type of data has a use case and is targeted at helping the end user. The same thing can be said for when you use services like a weather app with radar, get notifications on how long it takes to get home, to go to a meet up after work, etc.</p>\n    <p>All of those are actions with a high probability that the phone is on your person, and they are tied to discreet events like plugging in a device for charging or use in the car. This makes the collection of the data more defendable.</p>\n    <p>If you over collect, then there is a chance that you end up monitoring stuff that could just be a device in a vehicle without the person in the case of the apps that track family members of people and send texts for when people arrive at locations, or it could include sensitive information like trips to the doctor that already have data protections under current law.</p>\n    <p>There have been several companies that have gotten into trouble with how geolocation data was used. The gist of the rulings has been that users must opt-in to collection of the data, and the users must have the option to delete the data and be informed of every person that received the data. The rulings also defined sensitive locations and the rules around the use of the data by third parties.</p>\n    <p>The limitations of geolocation data and the privacy concerns are why a lot of the data that is mostly used by companies today is still old fashioned accounting data. Anything where you record transactions over time, count transactions and calculate totals and averages. These are the data points that you collect in the course of everyday business. In the case of bricks and mortar retailers, these points require someone to be present.</p>\n    <p>We will look more at this data and your brand in future posts.</p>\n","createdAt":"2024-02-25T22:44:19.000Z","author":"David Thigpen","category":null,"updatedAt":null,"likesCount":0,"authorId":null,"isPublished":true,"views":0},{"id":13,"uniqueId":"9ad0681f-d9b0-11ee-8ccc-0a0196b39d53","title":"Session Data: a deeper dive into how the data is stored, part 2","content":"    <p>The two small demos that you do when you first start out in software development are a blog and some type of user management system. Since we've already done the blog demo, let's take a moment to look at the way user management services are written.</p>\n    <p> I wrote a very basic version of this in python using FastApi this past week. Much like the <a href=\"https://github.com/davidt4444/basic-content-service\">basic-content-service</a> that is providing the content for this site, the user service is called <a href=\"https://github.com/davidt4444/basic-user-service\">basic-user-service</a> and is available <a href=\"https://github.com/davidt4444/basic-user-service\">here on the davidt4444 list of repositories on github</a>. </p>\n    <p>It is a very small compared to the user auth setup that I have for most of my personal systems and the stuff that I have worked on in the past at prior employers, but it is built as a demo. As such, the encryption is a placeholder and whatever took the least amount of time to put in place (The md5 function is built into maria and mysql). The main intent was to demonstrate the basics. It also only uses cookies for maintaining the login when you leave the page and browse back to it. It still functions fine without cookies as a standalone site, but without cookies, you have to log back in when you leave and browse back to it.</p>\n    <p>Within the python code, the part that represents the actual session is the data stored in the HashAgent. It is stored in memory in the <a href=\"https://github.com/davidt4444/basic-user-service\">basic-user-service</a>, but most production user managements systems would store each creation of that object in a transaction table covering the use of the site. It would be keyed on the hash and user id. The hash is a unique id for the session.</p>\n    <p>Under the General Data Protection Regulation (GDPR), each user has to be able to clear their data and delete their user. This is allowed for in the UI with the code in BasicUserService.js and the api calls to authenticationService.py. There also has to be a clear spelling out of the data that might be collected and how it is used. This is present at user creation in the privacy policy.</p>\n    <p>For those who want to store the logging data in a database, since most of the logging data in the session is needed for the operation of the site (clearing whether or not a user has the necessary permissions and logging any potential access issues) the logging is allowed. It is just considered personally identifying information and has to be secured and kept only as long as is necessary.</p> \n    <p>Since the cookie is used to allow the site to continue to function when you leave and browse back to the site and only exists while the browser is open, the session cookie falls under the strictly necessary first party cookies. All a session cookie represents is a value that acts as a key to lookup the data stored on the server for that session.</p>\n    <p>The <a href=\"https://github.com/davidt4444/basic-user-service\">basic-user-service</a> is just used as a basic user management system, but if it were expanded for use in other industries, there are certain types of data that are allowed to be stored in the session.</p>\n    <p>Among these things, the session could be used to store objects related to a shopping cart, a form being filled out, a video game score or any other cumulative process that the user is consciously aware is being done, because it would be considered part of the function of the site. There is also a carve out for data that you have to keep to comply with applicable laws.</p>\n    <p>In all of this, the user has to be aware of what you are doing. We will look at some examples of these applications in the coming pages.</p>\n","createdAt":"2024-03-03T22:51:42.000Z","author":"David Thigpen","category":null,"updatedAt":null,"likesCount":0,"authorId":null,"isPublished":true,"views":0},{"id":14,"uniqueId":"36cbcb50-ddde-11ee-8ccc-0a0196b39d53","title":"Ticketing systems, master data management and workflows","content":"    <p>A lot of people write down a list of items that they have to do in order to stay organized. In the restaurant industry, this can take the form of a ticket that the server uses to record the order. After the order is taken, a copy of the order is placed on a rail to be queued up and cooked by the cooks. When the food is done, the order is served.</p>\n    <p>In this, the workflow is controlled by three roles - the server, cook and customer. The order is taken from the customer, entered into the system by the server, cooked by the cook when it appears on the rail and served by the server when it is done. Each role controls when the ticket is moved to the next step in the workflow.</p>\n    <p>For computerized systems, the tickets are represented in the database as a list of orders that joins to another database holding all of the items in the order. The system provides a view where each item is like a column in a table row, so total sales of each item can be better tracked.</p>\n    <p>All of this data surrounding the transaction is considered master data. The workflow represents the process of the transaction. Looking at the business from this perspective makes it easier for analysts and managers to plan inventory and perform other operational tasks to keep the business going.</p>\n    <p>Originally, when I started writing this, I was going to provide a wire frame python implementation for a shopping cart, but, when I started writing the wire frame, it naturally morphed into something close to a master data solution that I currently have at <a href=\"https://www.aggregatedatasystems.com/\">Aggregate Data Systems</a>. So, I am just going to talk a little bit about that instead, but mostly on the workflow component of the problem space.</p>\n    <p>When most people are first out of college, there is a tendency to spend more time in the weeds of the process in terms of how fast something is, how much overhead there is, etc. instead of focusing on the overall problem. A lot of this is why I think that Windows Workflow Foundation and App Fabric received so little love from Microsoft.</p>\n    <p>The response from developers to the problem has often been focused on keeping the solution bogged down in the weeds by putting it in a yaml specification or otherwise pulling it out of the hands of the business user to gain some perceived speed benefit that is of little value to the business owner, because they have to spend a lot of money to hire someone that understands it.</p>\n    <p>The goal of <a href=\"https://www.aggregatedatasystems.com/\">Aggregate Data Systems'</a> offering in the Master Data Management space is to find a middle ground where you give some power back to the end user through programmed steps in a web GUI that can be customized, provide for starting/stopping between step handoffs in the middle of the workflow and are still user friendly to the end user. </p>\n    <p>I am still thinking about what to cover next off of the list of ideas I mentioned in the last page.</p>\n","createdAt":"2024-03-09T06:28:16.000Z","author":"David Thigpen","category":null,"updatedAt":null,"likesCount":0,"authorId":null,"isPublished":true,"views":0},{"id":15,"uniqueId":"a9fa62ce-e412-11ee-8ccc-0a0196b39d53","title":"Mobile device use cases","content":"    <p>When I was in college, my employer's wife had a restaurant that I liked. The restaurant had a beautiful website, but it only used flash, which you couldn't use on iPhones at the time. So, I redid the entire website to be only in html with a pdf menu, so that I could access the menu on my smartphone.</p>\n    <p>I often think back on that as an example of having a direct relationship with a use case. In real life, that is rare. Often, a lot of developers and business owners are separated to a good extent from the ways in which people use the end product of their work.</p>\n    <p>A good example of this is the way that many companies approach testing for web development. For most companies, it is an after thought. Most of the focus is usually put on getting the site to work on a desktop environment. This is despite the fact that about two thirds of all of all internet traffic is on mobile, and this is only going to increase. </p>\n    <p>As of February 7, 2024, the government stopped taking applications for the Affordable Connectivity Program for broadband assistance, so, after the program runs out of money sometime in April 2024, the only way that a lof people on the various aid programs in the United States will have access to the internet is through their mobile phone. Mobile phones are still subsidized for low income customers through the Lifeline Assistance Program.</p>\n    <p>This isn't just a phenomenon among low income people though. For a lot of people that frequently travel, the mobile device becomes their primary means of getting flight information, hotel reservations, a ride from the airport, food delivery, etc.</p>\n    <p>It has even hit recruitment. <a href=\"https://info.appcast.io/whitepaper/2022-recruitment-marketing-benchmark-report-website\">Appcast's 2022 Recruitment Benchmark Report stated that 67 percent of people applied for a job using their mobile phone in 2021</a>. When you consider the fact that the best case scenario with an imported resume on a job application site is that it fails in a predictable pattern, it seems like that is where the next bit of development is going to go if people decide not to outsource that work to the job boards.</p>\n    <p>The fact that more and more people are sending evermore sensitive information over their phone has meant that security requirements for a lot of the mobile browsers have been made stricter than your desktop. An example of this is the requirement for a certificating authority to sign ssl certificates as opposed to self signed certificates.</p>\n    <p>This is all to set the stage for what we will be covering next week on more of the data available to mobile app developers.</p>\n","createdAt":"2024-03-17T03:58:50.000Z","author":"David Thigpen","category":null,"updatedAt":null,"likesCount":0,"authorId":null,"isPublished":true,"views":0},{"id":16,"uniqueId":"482b393d-e8ce-11ee-8ccc-0a0196b39d53","title":"Cross platform mobile development","content":"    <p>The data available to mobile apps can take many forms. Large companies spend a lot of money on their main websites that are used for purchasing products and services. As a result, they have whole teams that specialize in one front end framework or another for the web and a group that is dedicated to building out the backend data providers for their website. </p>\n    <p>Each of these front end frameworks has a way to work reasonably well on mobile devices. So, while most companies may not be mobile first, they do develop their products to be accessible to their end user whether they be on a laptop or mobile phone.</p>\n    <p>However, since a lot of mobile phone users prefer to access services through an app, many companies have turned to things like Apache Cordova or one of the many frameworks like ionic that run on top of Cordova to start out with in order to be able to reuse their existing web code base for their mobile app.</p>\n    <p>Using those tools, developers ported over existing code and wrote custom mobile device native services that are specific to each platform and accessible to their javascript front end. Most of these services, like the native apps themselves, are limited by the api level that has to be specified in order to have access to the data that the developer may want. So, in some cases, you can get more access with less fuss when doing the same thing from a web app.</p>\n    <p>After starting with a cross-platform app, companies have either stayed put or moved to one of the many frameworks that exist out there. Some of the reasons often given are that the framework has its own graphics engine, has custom components or some other must have feature. However, the data provided by the apps in the app store really isn't significantly different from web based apps. </p>\n    <p>In the coming pages, a lot of the stuff that I focus on will be available to mobile apps and web apps viewed on mobile devices alike. There were a lot of features that came with the Navigator object that a lot of people forget come standard with the browser on mobile phones or even browsers in general. </p>\n","createdAt":"2024-03-23T04:31:56.000Z","author":"David Thigpen","category":null,"updatedAt":null,"likesCount":0,"authorId":null,"isPublished":true,"views":0},{"id":18,"uniqueId":"26d3e089-ed8f-11ee-8ccc-0a0196b39d53","title":"Your battery, your day and the web","content":"    <p>There are a lot of things that websites have access to that aren't surprising, because we see them in our everyday life as users. I thought that it might be nice to start off by taking a look at some of the things that we wouldn't normally associate with a website.</p>\n    <p>For instance, websites have access to the battery life of your device. </p>\n    <div>Charging: <span id=\"batteryIsCharging\"></span></div>\n    <div>Charging Time: <span id=\"batteryChargingTime\"></span></div>\n    <div>Discharging Time: <span id=\"batteryDischargingTime\"></span></div>\n    <div>Level: <span id=\"batteryLevel\"></span></div>\n    <p>This data is accessed through the navigator object's getBattery method, which returns a promise. If you have access to the battery, then you act on the promise as follows.</p>\n    <pre>\n      let batteryIsCharging = false;\n      let batteryChargingTime = 0;\n      let batteryDischargingTime = 0;\n      let batteryLevel = 0;\n      \n      navigator.getBattery().then((battery) => {\n        batteryIsCharging = battery.charging;\n        batteryChargingTime = battery.chargingTime;\n        batteryDischargingTime = battery.dischargingTime;\n        batteryLevel = battery.level;\n        document.getElementById(\"batteryIsCharging\").innerHTML = batteryIsCharging;\n        document.getElementById(\"batteryChargingTime\").innerHTML = batteryChargingTime;\n        document.getElementById(\"batteryDischargingTime\").innerHTML = batteryDischargingTime;\n        document.getElementById(\"batteryLevel\").innerHTML = batteryLevel;\n      \n        battery.addEventListener(\"chargingchange\", () => {\n          batteryIsCharging = battery.charging;\n          document.getElementById(\"batteryIsCharging\").innerHTML = batteryIsCharging;\n        });\n        battery.addEventListener(\"chargingtimechange\", () => {\n          batteryChargingTime = battery.chargingTime;\n          document.getElementById(\"batteryChargingTime\").innerHTML = batteryChargingTime;\n        });\n        battery.addEventListener(\"dischargingtimechange\", () => {\n          batteryDischargingTime = battery.dischargingTime;\n          document.getElementById(\"batteryDischargingTime\").innerHTML = batteryDischargingTime;\n        });\n        battery.addEventListener(\"levelchange\", () => {\n          batteryLevel = battery.level;\n          document.getElementById(\"batteryLevel\").innerHTML = batteryLevel;\n        });\n      });\n    </pre>\n    <p>This can be used to manage resource usage by you web application, so that you don't drain you end user's device down to zero, or you only request certain information when a device is charging. For instance, people tend to charge their device when they are in a car, at their desk, eating at a bar top in a restaurant or when they get home. These are all points of interest during the course of the day.</p>\n    <p>This is just a start of the events and data that we will loook at in the coming pages pertaining to all of the data that is being collected by websites and mobile apps on you as a user.</p>\n    <p><b>Note:</b> A working copy of the script is <a href=\"https://www.thenameofyourbrand.com/pages/page16.html\">on the static page version of page 16.</a> The event listeners and promise are passed on page load. The same thing is done with a lot of the events tracked on the screens in native mobile apps that collect data when the app is in use or in the foreground.</p>\n    <script>\nlet batteryIsCharging = false;\nlet batteryChargingTime = 0;\nlet batteryDischargingTime = 0;\nlet batteryLevel = 0;\n\nnavigator.getBattery().then((battery) => {\n  batteryIsCharging = battery.charging;\n  batteryChargingTime = battery.chargingTime;\n  batteryDischargingTime = battery.dischargingTime;\n  batteryLevel = battery.level;\n  document.getElementById(\"batteryIsCharging\").innerHTML = batteryIsCharging;\n  document.getElementById(\"batteryChargingTime\").innerHTML = batteryChargingTime;\n  document.getElementById(\"batteryDischargingTime\").innerHTML = batteryDischargingTime;\n  document.getElementById(\"batteryLevel\").innerHTML = batteryLevel;\n\n  battery.addEventListener(\"chargingchange\", () => {\n    batteryIsCharging = battery.charging;\n    document.getElementById(\"batteryIsCharging\").innerHTML = batteryIsCharging;\n  });\n  battery.addEventListener(\"chargingtimechange\", () => {\n    batteryChargingTime = battery.chargingTime;\n    document.getElementById(\"batteryChargingTime\").innerHTML = batteryChargingTime;\n  });\n  battery.addEventListener(\"dischargingtimechange\", () => {\n    batteryDischargingTime = battery.dischargingTime;\n    document.getElementById(\"batteryDischargingTime\").innerHTML = batteryDischargingTime;\n  });\n  battery.addEventListener(\"levelchange\", () => {\n    batteryLevel = battery.level;\n    document.getElementById(\"batteryLevel\").innerHTML = batteryLevel;\n  });\n});\n    </script>\n\n\n\n","createdAt":"2024-03-29T05:42:38.000Z","author":"David Thigpen","category":null,"updatedAt":null,"likesCount":0,"authorId":null,"isPublished":true,"views":0},{"id":19,"uniqueId":"2ec5169c-f303-11ee-8ccc-0a0196b39d53","title":"Network information and the status of your connection ","content":"    <p>I'm sure you've been on facebook, gmail or some other service and seen a message that tells you that the network connection has been interrupted and given you some countdown till it tried to reconnect. If you've ever wondered how this happens, then you are in the right place.</p>\n    <p>The navigator object has a connection property that has the following properties and potential values <a href=\"https://www.thenameofyourbrand.com/pages/page17.html\">(Go to the static page 17 to see the value of the property if it is not present to the right of the property on this page)</a>:</p>\n    <ul>\n      <li>downlink: <span id=\"downlink\"></span>\n        <ul>\n          <li>Bandwidth to the nearest 25k per second</li>\n        </ul>\n      </li>\n      <li>downlinkMax (experimental): <span id=\"downlinkMax\"></span>\n        <ul>\n          <li>Max downlink speed in megabits per second</li>\n        </ul>\n      </li>\n      <li>effectiveType: <span id=\"effectiveType\"></span>\n        <ul>\n          <li>slow-2g</li>\n          <li>2g</li>\n          <li>3g</li>\n          <li>4g</li>\n        </ul>\n      </li>\n      <li>rtt: <span id=\"rtt\"></span>\n        <ul>\n          <li>Round trip time to the nearest 25 milliseconds</li>\n        </ul>\n      </li>\n      <li>saveData: <span id=\"saveData\"></span>\n        <ul>\n          <li>True if reduced data usage is set</li>\n        </ul>\n      </li>\n      <li>type (experimental): <span id=\"type\"></span>\n        <ul>\n          <li>bluetooth</li>\n          <li>cellular</li>\n          <li>ethernet</li>\n          <li>none</li>\n          <li>wifi</li>\n          <li>wimax</li>\n          <li>other</li>\n          <li>unknown</li>\n        </ul>\n      </li>\n    </ul>\n    <p>To get the network values next to the properties to dynamically change, you can make use of the event listener for the navigator connection property. An example implementation of that is below:</p>\n    <pre>\n      function changeHandler(e) {\n        // Handle change of connection type here.\n        document.getElementById(\"downlink\").innerHTML=navigator.connection.downlink;\n        document.getElementById(\"downlinkMax\").innerHTML=navigator.connection.downlinkMax;\n        document.getElementById(\"effectiveType\").innerHTML=navigator.connection.effectiveType;\n        document.getElementById(\"rtt\").innerHTML=navigator.connection.rtt;\n        document.getElementById(\"saveData\").innerHTML=navigator.connection.saveData;\n        document.getElementById(\"type\").innerHTML=navigator.connection.type;\n    }\n\n    // Register for event changes:\n    navigator.connection.onchange = changeHandler;\n    </pre>\n    <p>As in the example at the beginning of this page, the connection change event can be used to update the user as to the status of the internet connection or cause the program to use fewer network resources. It can also tell the programmer some information about where the user is. As the speed of the connection goes up, the odds of the user being at home or in a populated area goes up. Also, this is a setting that is unlikely to be disabled by the user.</p>\n    <p>In the coming pages, we will continue our march through some of the data that is being collected on users from mobile web apps. </p>\n    <script>\n      document.getElementById(\"downlink\").innerHTML=navigator.connection.downlink;\n      document.getElementById(\"downlinkMax\").innerHTML=navigator.connection.downlinkMax;\n      document.getElementById(\"effectiveType\").innerHTML=navigator.connection.effectiveType;\n      document.getElementById(\"rtt\").innerHTML=navigator.connection.rtt;\n      document.getElementById(\"saveData\").innerHTML=navigator.connection.saveData;\n      document.getElementById(\"type\").innerHTML=navigator.connection.type;\n      function changeHandler(e) {\n          // Handle change of connection type here.\n          document.getElementById(\"downlink\").innerHTML=navigator.connection.downlink;\n          document.getElementById(\"downlinkMax\").innerHTML=navigator.connection.downlinkMax;\n          document.getElementById(\"effectiveType\").innerHTML=navigator.connection.effectiveType;\n          document.getElementById(\"rtt\").innerHTML=navigator.connection.rtt;\n          document.getElementById(\"saveData\").innerHTML=navigator.connection.saveData;\n          document.getElementById(\"type\").innerHTML=navigator.connection.type;\n      }\n\n      // Register for event changes:\n      navigator.connection.onchange = changeHandler;\n    </script>\n","createdAt":"2024-04-05T04:15:49.000Z","author":"David Thigpen","category":null,"updatedAt":null,"likesCount":0,"authorId":null,"isPublished":true,"views":0},{"id":20,"uniqueId":"2dbb0b3f-f88b-11ee-8ccc-0a0196b39d53","title":"Focus and accessing the clipboard","content":"    <p>This and the pages starting at page 14 are part of a look at mobile development and data available to developers. Some of the variables in the examples are mobile specific and/or may require things to be loaded statically on page load. In those cases, I provide links to the static version of the page in the content posting.</p>\n    <p>This one is kind of fun because we use clipboard for a lot of different things that may or may not pertain to the site that we are viewing. So, the need for having access to the clipboard is very much context dependent.</p>\n    <p>This access to the clipboard comes from navigator.clipboard. It allows you to read and write contents to the clipboard based on the permissions that the page has been granted. </p>\n    <p>An example of accessing the clipboard is in the div below. After clicking on it, it should ask for permissions to \"See text and images copied to the clipboard.\" Click allow for it to function. If it does not work for you, <a href=\"https://www.thenameofyourbrand.com/pages/page18.html\">you can see it on the static page, where the necessary event listeners are set on page load</a>.</p>\n    <div class=\"destination\" id=\"destination\">Click this to see the contents of your clipboard here.</div>\n    <p>The code used to get this to work is below:</p>\n    <pre>\n      const destinationDiv = document.getElementById(\"destination\");\ndestinationDiv.addEventListener(\"click\", pasteData);\n\nasync function pasteData() {\n  destinationDiv.innerText = \"\"; //Clear inner text\n  try {\n    const clipboardContents = await navigator.clipboard.read();\n    for (const item of clipboardContents) {\n      for (const mimeType of item.types) {\n        const mimeTypeElement = document.createElement(\"p\");\n        mimeTypeElement.innerText = `MIME type: ${mimeType}`;\n        destinationDiv.appendChild(mimeTypeElement);\n        if (mimeType === \"image/png\") {\n          const pngImage = new Image(); // Image constructor\n          pngImage.src = \"image1.png\";\n          pngImage.alt = \"PNG image from clipboard\";\n          const blob = await item.getType(\"image/png\");\n          pngImage.src = URL.createObjectURL(blob);\n          destinationDiv.appendChild(pngImage);\n        } else if (mimeType === \"text/html\") {\n          const blob = await item.getType(\"text/html\");\n          const blobText = await blob.text();\n          const clipHTML = document.createElement(\"pre\");\n          clipHTML.innerText = blobText;\n          destinationDiv.appendChild(clipHTML);\n        } else if (mimeType === \"text/plain\") {\n          const blob = await item.getType(\"text/plain\");\n          const blobText = await blob.text();\n          const clipPlain = document.createElement(\"pre\");\n          clipPlain.innerText = blobText;\n          destinationDiv.appendChild(clipPlain);\n        } else {\n          throw new Error(`${mimeType} not supported.`);\n        }\n      }\n    }\n  } catch (error) {\n    console.log(error.message);\n  }\n}\n    </pre>\n    <p>To get that to work, a browser usually requires the following:</p>\n      <ul>\n        <li>A https or localhost connection</li>\n        <li>Permissions policies in the header for certain elements</li>\n        <li>An event that provides focus for access the clipboard</li>\n        <li>Permission for the web page to have access to clipboard</li>\n      </ul>\n    <p>This is in an ideal world though. Sometimes this isn't the case.</p>\n    <p>Depending on what feature was trying to be released, there were times when access to clipboard was relaxed to get a feature through. An example where this was allowed with Chrome was with new tab pages to support the google logo doodle in 2022.</p>\n    <p>As a developer, be mindful of this as an area of potential aid in helping mobile users do more with their data, while their hands might be full doing other tasks.</p>\n    <p>In the coming pages, we will continue our march through some of the data that is being collected on users from mobile web apps. </p>\n    <style>\n      .destination{\n        width:300px;\n        height:200px;\n        border:1px;\n        overflow-wrap: break-word;\n        overflow-y:auto;\n      }\n    </style>\n    <script>\n      const destinationDiv = document.getElementById(\"destination\");\ndestinationDiv.addEventListener(\"click\", pasteData);\n\nasync function pasteData() {\n  destinationDiv.innerText = \"\"; //Clear inner text\n  try {\n    const clipboardContents = await navigator.clipboard.read();\n    for (const item of clipboardContents) {\n      for (const mimeType of item.types) {\n        const mimeTypeElement = document.createElement(\"p\");\n        mimeTypeElement.innerText = `MIME type: ${mimeType}`;\n        destinationDiv.appendChild(mimeTypeElement);\n        if (mimeType === \"image/png\") {\n          const pngImage = new Image(); // Image constructor\n          pngImage.src = \"image1.png\";\n          pngImage.alt = \"PNG image from clipboard\";\n          const blob = await item.getType(\"image/png\");\n          pngImage.src = URL.createObjectURL(blob);\n          destinationDiv.appendChild(pngImage);\n        } else if (mimeType === \"text/html\") {\n          const blob = await item.getType(\"text/html\");\n          const blobText = await blob.text();\n          const clipHTML = document.createElement(\"pre\");\n          clipHTML.innerText = blobText;\n          destinationDiv.appendChild(clipHTML);\n        } else if (mimeType === \"text/plain\") {\n          const blob = await item.getType(\"text/plain\");\n          const blobText = await blob.text();\n          const clipPlain = document.createElement(\"pre\");\n          clipPlain.innerText = blobText;\n          destinationDiv.appendChild(clipPlain);\n        } else {\n          throw new Error(`${mimeType} not supported.`);\n        }\n      }\n    }\n  } catch (error) {\n    console.log(error.message);\n  }\n}\n\n    </script>\n\n","createdAt":"2024-04-12T05:11:54.000Z","author":"David Thigpen","category":null,"updatedAt":null,"likesCount":0,"authorId":null,"isPublished":true,"views":0},{"id":21,"uniqueId":"a19af466-fe08-11ee-8ccc-0a0196b39d53","title":"User-Agent and other ways of determining operating system, browser and other user details","content":"    <p>Most developers will honestly tell you that the User-Agent variable provided by navigator is not really the concrete truth about a given user. It is just a variable that is passed in the header to a request that is set by the browser, javascript or some type of server side code to gather data from a web page. For the most part, it is best to look at it as a way of trying to enforce consistency across a user session with regards to a hash and other meta data in a request.</p>\n    <p>With all of that being said, the User-Agent usually consists of the following</p>\n    <ul>\n      <li>Browser name</li>\n      <li>Browser Version</li>\n      <li>System information</li>\n      <ul>\n        <li>Operating System</li>\n        <li>Architecture</li>\n      </ul>\n      <li>Additional device information</li>\n      <ul>\n        <li>Platform</li>\n        <li>Platform details</li>\n        <li>Platform version</li>\n      </ul>\n    </ul>\n    <p>Some of the things like \"Windows NT 10.0\" may be present in requests from mainline browsers running on an operating system that isn't windows. The same is true for seeing things like \"Mac\", \"X11\" or \"Linux\" in the User-Agent.</p>\n    <p>Because of all of the inconsistencies in the information received from User-Agent, a lot of people have turned to window.matchMedia as a way of determining whether or not the device is mobile and finding out the max width of the screen. It is basically a function that allows you to search whether or not the document matched the query string.</p>\n    <p>For instance, </p>\n    <pre>\n      window.matchMedia(\"(pointer:coarse)\").matches \n    </pre>\n    <p>returns true if it is a mobile device, and </p>\n    <pre>\n      window.matchMedia(\"only screen and (max-width: 760px)\").matches\n    </pre>\n    <p>returns true if this is the only screen and the screen's max width is less than 760 pixels, which makes it more likely that it is a mobile device (Similar things are sometimes also done with using window.innerWidth and screen.width as the comparison values).</p>\n    <p>All of the data available to the developer discussed the last couple of pages is something that feeds into the context clues used by other navigator features that will be discussed in future pages.</p>\n","createdAt":"2024-04-19T04:52:31.000Z","author":"David Thigpen","category":null,"updatedAt":null,"likesCount":0,"authorId":null,"isPublished":true,"views":0},{"id":22,"uniqueId":"9ec27b56-02bb-11ef-8ccc-0a0196b39d53","title":"Bot detection and the example RSS feed","content":"    <p>For all of the things that some companies track, one of the things that has been fascinating to me has been the number of companies that provide gatekeepers to their RSS feeds. Those feeds are made to be read by machines.</p>\n    <p>The way that a lot of them work is by differentiating between traffic that belongs to the server side rendered (SSR) pages and the single page app (SPA). From the perspective of the bot, the page looks like a greeting page populated after the fact with the feed. As an example, I did something similar with the RSS feed for this site, but <a href=\"https://github.com/davidt4444/basic-cicada\">I provided a project with code that provided a workaround to access just the feed (It may work for data held on other sites too)</a>.</p>\n    <p>Using that method, doesn't block all traffic, it just throttles down the volume.</p>\n    <p>If you want to go further towards curtailing bot traffic, within the navigator object in javascript, there is an experimental attribute called webdriver that detects some common changes to the site consistent with bots. However, most people want most of their website to be crawled and indexed by the search engines. This is usually only used for admin controlled areas or other gated parts of a site in combination with a robots.txt file.</p>\n    <p>Outside of usage patterns and site traffic, the big giveaway is usually changes to the dom from interactions with the page through getPageCache which defines an element at document.$cdc_asdjflasutopfhvcZLmcfl_ or some other element defined by the developer in a recompiled version of the chrome driver (usually defined at chromium/chrome/test/chromedriver/js/call_function.js or just search for usages of the tag).</p> \n    <p><b>Note: mutation observers are sometimes used to catch cache elements being added under different names. Remember that mutation observers can be disconnected, but only after the page is loaded. So, the new cache name could be only one element listing in a sea of logging or not there at all. In most cases, it is more efficient to just look at the distribution and number of requests. It depends on what you are securing.</b></p>\n    <p>Within Chrome, developers also sometimes switch webdriver to false by starting chrome with the –disable-blink-features=AutomationControlled flag.</p>\n    <p>With firefox, what people often do is set the profile of the webdriver to the profile of the user with network.proxy.type equal to 1, network.proxy.http set to a proxy host, network.proxy.http_port set to a proxy port, dom.webdriver.enabled equal to false and useAutomationExtension equal to false. So, you basically appear as a normal user.</p>\n    <p>Some people also use robotic process automation (RPA) tools or browsers like opera or links (with --enable-javascript) to mimic users.</p>\n    <p>If you want to see a case where the webdriver value is true, add the following code to basic-cicada after the if statement detecting if the pre tag is in the html (around line 35) and comment out every other print statement.</p>\n    <pre>\n      script = 'var holder = document.createElement(\"div\");\\\n      holder.setAttribute(\"id\",\"headlessData\");\\\n      holder.innerHTML =  navigator.userAgent+\"\\\n      webdriver: \"+navigator.webdriver+\"\\\n      \";\\\n      document.getElementsByTagName(\"body\")[0].appendChild(holder);'\n      driver.execute_script(script)\n      holder = driver.find_element(By.ID, \"headlessData\")\n      results = holder.get_attribute(\"innerHTML\")\n      print(results)\n    </pre>\n    <p>There are a lot of things that developers do to quietly gather data about people coming to the site to detect changes that might be malicious, but, at the end of the day, people are going to always try to find a way around any roadblock in their way. The best thing that you can do is attempt to log the activity and follow up on it after the fact. For this, I use <a href=\"https://www.aggregatedatasystems.com/CentralView/search.html\">Aggregate Data Systems' Central View to monitor and search the feeds from my logs and other feeds</a>.</p>\n    <p>We will resume discussing more features available to web apps for mobile development in future pages. I just couldn't resist an aside on bots after discussing User-Agent in the previous page.</p>\n","createdAt":"2024-04-25T04:23:51.000Z","author":"David Thigpen","category":null,"updatedAt":null,"likesCount":0,"authorId":null,"isPublished":true,"views":0},{"id":23,"uniqueId":"3549a0c5-073d-11ef-8ccc-0a0196b39d53","title":"Languages and other things to consider","content":"    <p>This and the pages starting at page 14 are part of a look at mobile development and data available to developers. Some of the variables in the examples are mobile specific and/or may require things to be loaded statically on page load. In those cases, I provide links to the static version of the page in the content posting.</p>\n    <p>So far, we have covered the following navigator abilities:</p>\n    <ul>\n      <li>battery</li>\n      <li>connection</li>\n      <li>clipboard</li>\n      <li>userAgent</li>\n      <li>webdriver</li>\n    </ul>\n    <p>Having data on all of these allows us to filter through the data that we get on our users. The one piece that hasn't been covered is language.</p>\n    <p>Navigator has navigator.language, which has the default language for the browser, and navigator.languages, which has the languages supported by the browser. There usage is below <a hre=\"https://www.thenameofyourbrand.com/pages/page21.html\">(If it doesn't show up, the static page is here)</a>:</p>\n    <ul>\n      <li id=\"language\">language: </li>\n      <li id=\"languages\">languages: </li>\n    </ul>\n    <script>\n      document.getElementById(\"language\").appendChild(document.createTextNode(navigator.language));\n      document.getElementById(\"languages\").appendChild(document.createTextNode(navigator.languages));\n    </script>\n    <p>For many outside services, a lot of the bots that crawl pages have their ipv4 addresses excluded from the dataset reports. However, depending on how they store, query and exclude the data, if the services don't use the inet6_atoi or its equivalent function in their query, sometimes you get hits from bots that still show up in the results, because inet_atoi has equivalent integer values in ipv4 and ipv6 that represent two distinct addresses in different locales.</p>\n    <p>Using navigator.languages, allows you to have a heuristic to sanity check the data that you get from outside analytics tools or datasets, because a lot of the ipv6 ip addresses that are equivalent to ipv4 addresses are in Asia while the equivalent ipv4 address is in North America. It also allows you to differentiate between different regions whose ip addresses are labeled China by some data providers.</p>\n    <p>In a lot of user management systems, it can also serve as a way of detecting cases where a user account has potentially been compromised, but it is not the only thing that is used. We will cover the other piece that is used in the next page.</p>\n","createdAt":"2024-04-30T22:01:34.000Z","author":"David Thigpen","category":null,"updatedAt":null,"likesCount":0,"authorId":null,"isPublished":true,"views":0},{"id":24,"uniqueId":"4ef949ed-073d-11ef-8ccc-0a0196b39d53","title":"Geolocation data in context","content":"    <p>In February of 2024, <a href=\"https://www.ftc.gov/news-events/news/press-releases/2024/01/ftc-order-prohibits-data-broker-x-mode-social-outlogic-selling-sensitive-location-data\">the Federal Trade Commission came out with an order that limited the ability of a companies like x-mode and outlogic from selling your location data to data brokers without your consent</a>. This data included sensitive areas like reproductive health clinics, medical facilities, religious places and abuse shelters.</p>\n    <p>To give you an idea of the kind of data that you share when you agree to allow an application to have access to you location, you can enable location services for your browser, go to <a href=\"https://www.thenameofyourbrand.com/pages/geolocation.html\">https://www.thenameofyourbrand.com/pages/geolocation.html</a> and agree to share your location. When you do, it will show you the data points applications see when that is enabled. </p>\n    <p>On your desktop, applications just have access to latitude, longitude, the accuracy of the latitude/longitude measurements and a timestamp. With mobile devices, it also has access to altitude, altitude accuracy, heading and speed.</p>\n    <p>If you search the lat longs that it gives you, they are typically very accurate in densely populated areas like Washington DC or New York City that produce a lot of data points, but if you are in parts of flyover country, you will sometimes notice that the data can be wildly off for that one measurement.</p>\n    <p>An example is being on foot at the intersection in front of the state's largest employer and having the GPS put your location as being in the middle of the parking lot about 300 yards away. This makes sense, because most of the GPS measurement points that phones will be measuring are from the moment the employees park their car in the parking lot and disconnect from their car's bluetooth. You are just a random data point outside the normal distribution. After all, it is the largest employer in the state.</p>\n    <p>Meanwhile, accuracy is near perfect if you are on foot at the entrance to the business, where most people would be waiting for an uber to pick them up, and there are nearby wifi networks.</p>\n    <p>Any time when you pull points of context like time of day, related devices, being connected to the charger, being connected to the bluetooth or wifi, the strength of the cellular signal or anything else, the GPS data tends to be less accurate. There are also cases where the positioning of buildings and the use of certain electrical equipment nearby can limit the ability of the device to properly receive the signal. </p>\n    <p><b>Note: it is only one data point. I get reminded by my friends that do surveying work that surveyors used to use a full sized trailer parked at a fixed location to gather data over a period of days to submit to the National Oceanic and Atmospheric Administration's (NOAA) Online Positioning User Service (OPUS) for an accurate reading on a location. The equivalent of that is now contained in a phone (Although, the equipment they use for surveying now is about the size of a soccer ball, way more accurate than a phone and very expensive).</b></p>\n    <p>So, when looking at the point reported, a broader context of the area surrounding the point that is reported might be worthwhile. Also, all of the filters discussed in prior pages from battery charge info, network information and user activity plus third party datasets on GPS signal accuracy, wifi network locations, etc. should be considered.</p>\n    <p>We will keep plowing our way through the list of data that developers have access to from mobile devices in the coming pages, but this seems to be the one that people get most hung up on.</p>\n","createdAt":"2024-04-30T22:02:17.000Z","author":"David Thigpen","category":null,"updatedAt":null,"likesCount":0,"authorId":null,"isPublished":true,"views":0},{"id":25,"uniqueId":"755e7670-1335-11ef-8ccc-0a0196b39d53","title":"Taking pictures via a web ui and metadata capture","content":"    <p>This and the pages starting at page 14 are part of a look at mobile development and data available to developers. Some of the variables in the examples are mobile specific and/or may require things to be loaded statically on page load. In those cases, I provide links to the static version of the page in the content posting.</p>\n    <p>A lot of mobile apps like to have avatars that represent people while they are on a site or would like to have a way of marking an accomplishment of a user via a picture. There are a few ways of accomplishing this natively, but there is also a way to do this via a web app. If you do it correctly, there is  exchangeable image file format (EXIF) metadata usually found in jpeg, tiff and wav files that you can collect from the camera as well as a way to save the image without the metadata.</p>\n    <p>For an example of the EXIF metadata that can be in a file, upload a jpeg using the input below. If it has EXIF metadata, it will spit it out below the input. <a href=\"https://www.thenameofyourbrand.com/pages/page23.html\">If it does not work, you can visit the static page that has a working copy that pulls the necessary libraries on page load here.</a></p>\n    <input type=\"file\" id=\"test_img\" class=\"test_img\" name=\"test_img\" accept=\"image/png, image/jpeg\" />\n    <div id=\"upload_output\"></div>\n    <script src=\"https://cdn.jsdelivr.net/npm/exif-js\"></script>\n    <script>\n  //Include minified EXIF from npm cdn referenced on project page here\n  //https://github.com/exif-js/exif-js\n  document.getElementById(\"test_img\").addEventListener(\"change\", function() {\n        var file = this.files[0];  // file\n            fr   = new FileReader; // to read file contents\n    \n        fr.onload = function() {\n    \n            // get EXIF data\n            var exif = EXIF.readFromBinaryFile(this.result);\n    \n            var pre = document.createElement(\"pre\");\n            pre.appendChild(document.createTextNode(JSON.stringify(exif, null, \"\\t\")));\n            document.getElementById(\"upload_output\").innerHTML=pre.outerHTML;\n        };\n    \n        fr.readAsArrayBuffer(file); // read the file\n    });\n    \n    </script>\n    <p>The code used to populate the result div is below.</p>\n    <pre>\n      document.getElementById(\"test_img\").addEventListener(\"change\", function() {\n        var file = this.files[0];  // file\n            fr   = new FileReader; // to read file contents\n    \n        fr.onload = function() {\n    \n            // get EXIF data\n            var exif = EXIF.readFromBinaryFile(this.result);\n    \n            var pre = document.createElement(\"pre\");\n            pre.appendChild(document.createTextNode(JSON.stringify(exif, null, \"\\t\")));\n            document.getElementById(\"upload_output\").innerHTML=pre.outerHTML;\n        };\n    \n        fr.readAsArrayBuffer(file); // read the file\n    });\n\n    </pre>    \n    <p>The javascript that gets the data uses a project called <a href=\"https://github.com/exif-js/exif-js\">exif-js</a> to parse the data in the file and strip out the metadata in the image. This metadata doesn't just come from the camera. It can come from things like image editing software or user input. It can contain info such as the make and model of the device as well as when the photo was taken.</p>\n    <p>The code below shows how to make use of navigator.mediaDevices.getUserMedia to capture an image from a device's camera in a video element on the page that is then painted onto a canvas element.</p>\n    <pre>\n      const player = document.getElementById('player');\n      const canvas = document.getElementById('canvas');\n      const context = canvas.getContext('2d');\n      const captureButton = document.getElementById('capture');\n    \n      const constraints = {\n        video: true,\n      };\n    \n      captureButton.addEventListener('click', () => {\n        // Draw the video frame to the canvas.\n        context.drawImage(player, 0, 0, canvas.width, canvas.height);\n        var dataURL = canvas.toDataURL(\"image/jpeg\");\n        var arr = dataURL.split(\",\"),\n          mime = arr[0].match(/:(.*?);/)[1],\n          bstr = atob(arr[arr.length - 1]),\n          n = bstr.length,\n          u8arr = new Uint8Array(n);\n        while (n--) {\n          u8arr[n] = bstr.charCodeAt(n);\n        }\n        const holder= new File([u8arr], \"holder.jpeg\", { type: \"image/jpeg\" });\n        EXIF.getData(holder, function () {\n              const make = EXIF.getAllTags(holder);\n              var pre = document.createElement(\"pre\");\n              pre.appendChild(document.createTextNode(JSON.stringify(make, null, \"\\t\")));\n              document.getElementById(\"canvas_output\").innerHTML=pre.outerHTML;\n         });\n    \n      // Attach the video stream to the video element and autoplay.\n      navigator.mediaDevices.getUserMedia(constraints).then((stream) => {\n        player.srcObject = stream;\n      \n        const track = stream.getVideoTracks()[0];\n      let imageCapture = new ImageCapture(track);\n      imageCapture.takePhoto().then((blob) => {\n          const newFile = new File([blob], \"MyJPEG.jpg\", { type: \"image/jpeg\" });\n          EXIF.getData(newFile, function () {\n              const make = EXIF.getAllTags(newFile);\n              var pre = document.createElement(\"pre\");\n              pre.appendChild(document.createTextNode(JSON.stringify(make, null, \"\\t\")));\n              document.getElementById(\"exif_output\").innerHTML=pre.outerHTML;\n         });\n      });\n    \n      });      \n    \n    </pre>\n    <p>It starts off by setting the variables with the elements used to capture the data. It adds an event listener for when you push the capture button to save the image on the video element to canvas, and below that it attaches the video stream to the video element. The exif logic that is in both spots is for showing the exif metadata that is collected from the image on the canvas verses the exif data that is collected from the camera. The image saved from the canvas strips out the metadata provided by the camera and just returns an empty metadata object.</p>\n    <p>Note: if you are sending the output of a canvas element as a request back to the server for storage, you would use toBlob instead of toDataURL and store the image as a blob in the database.</p>\n    <p>If you grant the browser access to the camera, you can see the code in action below. <a href=\"https://www.thenameofyourbrand.com/pages/page23.html\">If it does not work, you can visit the static page that has a working copy that pulls the necessary libraries on page load here.</a></p>\n    <div>\n      <video id=\"player\" controls autoplay></video>\n    </div>\n    <div>\n      <button id=\"capture\">Capture</button>\n    </div>\n    <div>\n      <canvas id=\"canvas\" width=\"320\" height=\"240\"></canvas>\n    </div>\n    <b>Camera</b>\n    <div id=\"exif_output\"></div>\n    <b>Canvas</b>\n    <div id=\"canvas_output\"></div>\n  \n  <script>\n  const player = document.getElementById('player');\n  const canvas = document.getElementById('canvas');\n  const context = canvas.getContext('2d');\n  const captureButton = document.getElementById('capture');\n\n  const constraints = {\n    video: true,\n  };\n\n  captureButton.addEventListener('click', () => {\n    // Draw the video frame to the canvas.\n    context.drawImage(player, 0, 0, canvas.width, canvas.height);\n    var dataURL = canvas.toDataURL(\"image/jpeg\");\n    var arr = dataURL.split(\",\"),\n      mime = arr[0].match(/:(.*?);/)[1],\n      bstr = atob(arr[arr.length - 1]),\n      n = bstr.length,\n      u8arr = new Uint8Array(n);\n    while (n--) {\n      u8arr[n] = bstr.charCodeAt(n);\n    }\n    const holder= new File([u8arr], \"holder.jpeg\", { type: \"image/jpeg\" });\n    EXIF.getData(holder, function () {\n          const make = EXIF.getAllTags(holder);\n          var pre = document.createElement(\"pre\");\n          pre.appendChild(document.createTextNode(JSON.stringify(make, null, \"\\t\")));\n          document.getElementById(\"canvas_output\").innerHTML=pre.outerHTML;\n          // console.log(\"All data\", make);\n     });\n// If you would like to view the image from the canvas in a new window\n// var newTab = window.open('about:blank','image from canvas');\n// newTab.document.write(\"<img src='\" + dataURL + \"' alt='from canvas'/>\");\n// To download\n// var link = document.createElement('a');\n//         var url = URL.createObjectURL(holder);\n        \n//         link.target=\"_blank\";\n//         link.href = url;\n//         link.click();\n});\n\n  // Attach the video stream to the video element and autoplay.\n  navigator.mediaDevices.getUserMedia(constraints).then((stream) => {\n    player.srcObject = stream;\n  \n    const track = stream.getVideoTracks()[0];\n  let imageCapture = new ImageCapture(track);\n  imageCapture.takePhoto().then((blob) => {\n      const newFile = new File([blob], \"MyJPEG.jpg\", { type: \"image/jpeg\" });\n      EXIF.getData(newFile, function () {\n          const make = EXIF.getAllTags(newFile);\n          var pre = document.createElement(\"pre\");\n          pre.appendChild(document.createTextNode(JSON.stringify(make, null, \"\\t\")));\n          document.getElementById(\"exif_output\").innerHTML=pre.outerHTML;\n          // console.log(\"All data\", make);\n     });\n  });\n\n  });      \n  </script>\n  <script>\n  //Include EXIF from here \n  //https://github.com/exif-js/exif-js\n  \n//   navigator.mediaDevices.getUserMedia({ video : true }).then( function(stream){\n//   const track = stream.getVideoTracks()[0];\n//   let imageCapture = new ImageCapture(track);\n//   imageCapture.takePhoto().then((blob) => {\n//       const newFile = new File([blob], \"MyJPEG.jpg\", { type: \"image/jpeg\" });\n//       EXIF.getData(newFile, function () {\n//           const make = EXIF.getAllTags(newFile);\n//           var pre = document.createElement(\"pre\");\n//           pre.appendChild(document.createTextNode(JSON.stringify(make, null, \"\\t\")));\n//           document.getElementById(\"exif_output\").appendChild(pre);\n//           // console.log(\"All data\", make);\n//      });\n//   });\n// });\n\n\n</script>\n\n\n","createdAt":"2024-05-16T03:36:19.000Z","author":"David Thigpen","category":null,"updatedAt":null,"likesCount":0,"authorId":null,"isPublished":true,"views":0},{"id":26,"uniqueId":"b7297f55-18c0-11ef-8ccc-0a0196b39d53","title":"Modals and focus in designing pages","content":"    <p>This and the pages starting at page 14 are part of a look at mobile development and data available to developers. Some of the variables in the examples are mobile specific and/or may require things to be loaded statically on page load. In those cases, I provide links to the static version of the page in the content posting.</p>\n    <p>Several of the last few pages have begun with the previous paragraph, and many of those pages have focused accessing things like the camera, GPS and other areas that may contain sensitive information. One tool that a lot of websites and apps use to warn users about accessing that information might be the modal.</p>\n    <p>If you are viewing this on the static page, then you were greeted by the modal. <a href=\"https://www.thenameofyourbrand.com/pages/page24.html\">If you do not see the modal, click here to go to the static page that will have the necessary elements loaded on page load for it to work.</a></p>\n    <dialog class=\"starter\">\n      <p>This and the pages starting at page 14 are part of a look at mobile development and data available to developers. Some of the variables in the examples are mobile specific and/or may require things to be loaded statically on page load. In those cases, I provide links to the static version of the page in the content posting.</p>\n      <form method=\"dialog\">\n        <button>OK</button>\n      </form>\n    </dialog>\n    <style>\n      ::backdrop {\n        background-color: gray;\n        /* opacity: 0.75; */\n      }      \n    </style>\n    <script>\n      var dialog = document.querySelector(\"dialog\");\n      dialog.showModal();\n    </script>\n\n  <xmp>\n      <dialog>\n        <p>This and the pages starting at page 14 are part of a look at mobile development and data available to developers. Some of the variables in the examples are mobile specific and/or may require things to be loaded statically on page load. In those cases, I provide links to the static version of the page in the content posting.</p>\n        <form method=\"dialog\">\n          <button>OK</button>\n        </form>\n      </dialog>\n      <style>\n        ::backdrop {\n          background-color: gray;\n          /* opacity: 0.75; */\n        }      \n      </style>\n      <script>\n        var dialog = document.querySelector(\"dialog\");\n        dialog.showModal();\n      </script>\n  \n    </xmp>    \n    <p>The code for the modal shown above is one that blocks the entire page and takes focus away from the document on which it is used. It does this by using backdrop in the css to display the background color in the viewport immediately behind the element in the top layer, which is the dialog box when showModal is called in the javascript. Modals displayed like this are usually used to prompt users for cookie permissions, warm people that an action may be permanent, etc. It is just one example of a modal use case.</p>\n    <p>I am not opposed to using a modal. In fact, a lot of companies that I have worked for have had user interface designers that were huge fans of modals. So, a lot of the mock ups that I had to wire up and make a reality were very heavy on modals in the site workflow. They were my customers, and they hired me to make their design work the way they wanted it to work.</p>\n    <p>Outside of this page, I choose not to use a modal, because it is a different use case. I would rather someone read about the code that is going to be run before actually doing a demo of the code by actively clicking a link. Using a modal to pull focus takes away from the intended goal of the pages.</p>\n    <p>However, not all modals completely take away focus. The code below is what is being run to display a modal that doesn't completely take focus away from the page and just shows a floating modal. <a href=\"https://www.thenameofyourbrand.com/pages/page24.html\">If you do not see the modal, click here to go to the static page that will have the necessary elements loaded on page load for it to work.</a></p>\n\n      <dialog open>\n        <p>Hello, this is a modal. Hear me roar!</p>\n        <form method=\"dialog\">\n          <button>OK</button>\n        </form>\n      </dialog>\n    <xmp>\n      <dialog open>\n        <p>Hello, this is a modal. Hear me roar!</p>\n        <form method=\"dialog\">\n          <button>OK</button>\n        </form>\n      </dialog>\n    </xmp>\n    <p>It doesn't completely take focus, because it has open in the dialog element. A similar behavior can also be achieved by using the show function on the dialog element instead of the showModal function, because the focus stays on the body element in the html. To stop displaying the modal, you can use the close function on the dialog element or use the button in the form element inside the dialog with a method of dialog.</p>\n    <p>With all of this in mind, it is possible to manage the workflow from within the events fired by the display elements in the modal and keep the entire workflow in one page. You could also just as easily do this inside a div element and use css to manage positioning behavior to make it look like the div is a modal positioned on top of the rest of the elements using relative and absolute for position. In that case, you would just use the element properties style.display='none' and style.display='table-cell' to hide and show the element respectively.</p>\n    <p>However, if your primary goal is to take focus on the page away from every other element in the document, the modal implementation at the beginning of the page is the best way of doing that, because it pulls in the backdrop style that was defined in the css for the first example.</p>\n    <p>If you want to check on things like focus for the entire document, there is a function document.hasFocus(), but it is mainly useful in looking at the behavior with regard to the window, pop ups and other applications on the computer taking focus away from the browser or that specific tab.</p>\n    <p>The coming pages will continue the march through mobile web development and some of the features that already exist within modern browsers.</p>\n","createdAt":"2024-05-23T04:55:45.000Z","author":"David Thigpen","category":null,"updatedAt":null,"likesCount":0,"authorId":null,"isPublished":true,"views":0},{"id":27,"uniqueId":"5445db47-1f7b-11ef-8ccc-0a0196b39d53","title":"Visibility and notifications","content":"    <p>This and the pages starting at page 14 are part of a look at mobile development and data available to developers. Some of the variables in the examples are mobile specific and/or may require things to be loaded statically on page load. In those cases, I provide links to the static version of the page in the content posting.</p>\n    <p>You've probably seen the permission box asking if you want allow notifications. Between email, Messenger, Discord, Slack and whatever other messaging service people around me are using, I get overwhelmed by the volume, so I tend to click no and prioritize my viewing of services based on the thing I am trying to do. </p>\n    <p>However, a lot of people do use notifications to keep up to date on everything that is going on with the various services that they use. This is especially true when it comes to their phone.</p>\n    <p>While there are functions for vibrate and notifications within javascript, most browsers have the notifications collapsed or hidden by default and have vibrate disabled or hidden for mobile phones. So to achieve the same goal, you have to use a work around that forces developers to be more considerate of their users. </p>\n    <p>One way of doing this with web apps is to make use of the visibility state of the document. The document can be either visible or hidden.</p> \n    <p> In the example below, the title is saved in a global variable, the notification count is held in count, time_passing is an unordered list element to hold the messages, and the interval id is held in interval when it is set and is -1 when it isn't set. It fires off notifications when the tab isn't visible at regular intervals and clears when it is visible. <a href=\"https://www.thenameofyourbrand.com/pages/page25.html\">If you do not see the title updating when you are in another tab in the browser (Hence the document isn't visible), click here to go to the static page that will have the necessary elements loaded on page load for it to work.</a></p>\n    <xmp>\n      let title = document.getElementsByTagName(\"title\")[0].innerHTML;\n      let count = 1;\n      let time_passing = document.getElementById(\"time_passing\");\n      let interval = -1;\n\n      function clearStatus(){\n        count=1;\n        document.getElementsByTagName(\"title\")[0].innerHTML = title;\n      }\n      function updateStatus(status=\"The current time is \"){\n        document.getElementsByTagName(\"title\")[0].innerHTML = title + \" (\"+count+\")\";\n        count++;\n\n        var message = document.createElement(\"li\");\n        message.setAttribute(\"class\", \"message\");\n        var date = new Date();\n        message.innerHTML = status + date.toLocaleTimeString() + \" \"+date.toDateString();\n        time_passing.appendChild(message);\n      }\n      document.addEventListener(\"visibilitychange\", () => {\n        if (document.visibilityState === \"visible\") {\n          clearStatus();\n          if(interval != -1){\n            clearInterval(interval);\n            interval = -1;\n          }\n        }\n        else{ //hidden\n          if(interval == -1){\n            interval = setInterval(updateStatus, 300);\n          }\n        }\n      });\n    </xmp>\n    <ul id=\"time_passing\"></ul>\n    <script>\n      let title = document.getElementsByTagName(\"title\")[0].innerHTML;\n      let count = 1;\n      let time_passing = document.getElementById(\"time_passing\");\n      let interval = -1;\n\n      function clearStatus(){\n        count=1;\n        document.getElementsByTagName(\"title\")[0].innerHTML = title;\n      }\n      function updateStatus(status=\"The current time is \"){\n        document.getElementsByTagName(\"title\")[0].innerHTML = title + \" (\"+count+\")\";\n        count++;\n\n        var message = document.createElement(\"li\");\n        message.setAttribute(\"class\", \"message\");\n        var date = new Date();\n        message.innerHTML = status + date.toLocaleTimeString() + \" \"+date.toDateString();\n        time_passing.appendChild(message);\n      }\n      document.addEventListener(\"visibilitychange\", () => {\n        if (document.visibilityState === \"visible\") {\n          clearStatus();\n          if(interval != -1){\n            clearInterval(interval);\n            interval = -1;\n          }\n        }\n        else{ //hidden\n          if(interval == -1){\n            interval = setInterval(updateStatus, 300);\n          }\n        }\n      });\n    </script>\n    <p>In a real world application of this, the interval logic would be removed and the update function would only be called when the web application had a new message to send to the user. You would also put the list in an element as a part of a drop down like Facebook does in their site or a new page like LinkedIn does on their site with appropriate css. </p>\n","createdAt":"2024-05-31T18:26:42.000Z","author":"David Thigpen","category":null,"updatedAt":null,"likesCount":0,"authorId":null,"isPublished":true,"views":0},{"id":28,"uniqueId":"8855877e-23c9-11ef-8ccc-0a0196b39d53","title":"Dynamically creating files and download location","content":"    <p>This and the pages starting at page 14 are part of a look at mobile development and data available to developers. Some of the variables in the examples are mobile specific and/or may require things to be loaded statically on page load. In those cases, I provide links to the static version of the page in the content posting.</p>\n    <p>In previous pages, I have covered taking photos and saving the images from a canvas. One thing that I have not covered is creating a file from data that is generated from a web app in javascript.</p>\n    <p>If you click the button below it will generate a plain text file that has the content \"Hello World!\" in it. <a href=\"https://www.thenameofyourbrand.com/pages/page26.html\">If it does not generate the text file when you click the button, click here to go to the static page that will have the necessary elements loaded on page load for it to work.</a></p>\n    <button onclick=\"helloWorldFile()\">Create a Hello World File!</button>\n    <script>\n      function helloWorldFile(){\n        var content = \"Hello world!\";\n        var name = \"HelloWorld\";\n        var extension = \"txt\";\n        var type = \"text/plain\";\n        var file = new File([content], name+'.'+extension, {\n            type: type,\n        });\n        var link = document.createElement('a');\n        var url = URL.createObjectURL(file);\n        \n        link.href = url;\n        link.download = file.name;\n        link.click();\n      }\n    </script>\n    <xmp>\n      function helloWorldFile(){\n        var content = \"Hello world!\";\n        var name = \"HelloWorld\";\n        var extension = \"txt\";\n        var type = \"text/plain\";\n        var file = new File([content], name+'.'+extension, {\n            type: type,\n        });\n        var link = document.createElement('a');\n        var url = URL.createObjectURL(file);\n        \n        link.href = url;\n        link.download = file.name;\n        link.click();\n      }\n    </xmp>\n    <p>In the example above, content is a string passed into the file constructor as part of a BlobPart array that makes up the raw contents of the file. Name is the first part of the file name in the filesystem and extension is the part after the period. Type is the MIME type for the output document. </p>\n    <p>If you clicked on the button on a smart phone, you are probably wondering where the file was saved.</p>\n    <p>On iPones, files are downloaded to the files app->iCloud Drive->Downloads folder.</p>\n    <p>On Android, files are downloaded to the files app->Downloads category.</p>\n    <p>This behavior is different than the default location for saved files in a native app. In that case, the file would have been saved to the /data/data/APP_NAME/files folder on the device by default.</p>\n    <p>Most apps would maintain a copy of the data in the file in a database that could be accessed via a web service, but there are some cases where you may want to not store the data this way.</p>\n    <p>In these cases, you would have to upload the data using a file input. You can try doing this using the file that you just created from the above button in the file input below.  <a href=\"https://www.thenameofyourbrand.com/pages/page26.html\">If it does not do anything when you input a file, click here to go to the static page that will have the necessary elements loaded on page load for it to work.</a></p>\n    <input type=\"file\" id=\"test_file\" class=\"test_file\" name=\"test_file\" accept=\"text/plain\" />\n    <div id=\"upload_output\"></div>\n    <script>\n      document.getElementById(\"test_file\").addEventListener(\"change\", function() {\n            var file = this.files[0];  // file\n                fr   = new FileReader; // to read file contents\n        \n            fr.onload = function() {\n                var enc = new TextDecoder(\"utf-8\");\n                document.getElementById(\"upload_output\").innerHTML=enc.decode(this.result);\n            };\n        \n            fr.readAsArrayBuffer(file); // read the file\n        });\n        \n    </script>\n    <p>It should have output the text in the file above here. The code used to produce this result is below.</p>\n    <xmp>\n      document.getElementById(\"test_file\").addEventListener(\"change\", function() {\n        var file = this.files[0];  // file\n            fr   = new FileReader; // to read file contents\n    \n        fr.onload = function() {\n            var enc = new TextDecoder(\"utf-8\");\n            document.getElementById(\"upload_output\").innerHTML=enc.decode(this.result);\n        };\n    \n        fr.readAsArrayBuffer(file); // read the file\n    });\n    </xmp>\n    <p>The code above catches when the file input has changed, and it spits the data out into the output element. Should there have been any processing to be done there, it would have taken place in the onload portion of the code after the array buffer was decoded. </p>\n    <p>There are features available to the browser that are closer to native functionality via the file system access api, but this page is mainly focused on the origin private part of file system access that is usable on mobile devices.</p>\n","createdAt":"2024-06-06T05:56:35.000Z","author":"David Thigpen","category":null,"updatedAt":null,"likesCount":0,"authorId":null,"isPublished":true,"views":0}]

